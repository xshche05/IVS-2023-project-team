import math
from random import random, choice
from math import sqrt, pow
import signal
import sys

UNARIES = ["sqrt(%s)", "(0-%s)"]
BINARIES = ["%s + %s", "%s - %s", "%s * %s", "%s / %s", "(%s) ** (%s)"]

PROP_PARENTHESIS = 0.3

PROP_BINARY = 0.7


# class timeout:
#     def __init__(self, seconds=1, error_message='Timeout'):
#         self.seconds = seconds
#         self.error_message = error_message
#     def handle_timeout(self, signum, frame):
#         raise TimeoutError(self.error_message)
#     def __enter__(self):
#         signal.signal(signal.SIGALRM, self.handle_timeout)
#         signal.alarm(self.seconds)
#     def __exit__(self, type, value, traceback):
#         signal.alarm(0)


def generate_expressions(scope, num_exp, num_ops):
    scope = list(scope)  # make a copy first, append as we go

    for _ in range(num_ops):
        if random() < PROP_BINARY:  # decide unary or binary operator

            ex = choice(BINARIES) % (choice(scope), choice(scope))
            if random() < PROP_PARENTHESIS:
                ex = "(%s)" % ex
            scope.append(ex)
        else:
            scope.append(choice(UNARIES) % choice(scope))
    return scope[-num_exp:]  # return most recent expressions


file = open("IvsCalcMathLibTest.cpp", "w")
file.write("""/// THIS FILE IS AUTOGENERATED BY THE TOOL
///
/// UNLESS YOU KNOW WHAT YOU ARE DOING, 
/// MODIFYING THIS FILE IS NOT RECOMMENDED
///
/// Run generate_tests.py to regenerate this file

#include <gtest/gtest.h>
#include <gtest/gtest-spi.h>
#include <cmath>
#include "IvsCalcMathLib.h"

#define ERR_MARGIN 0.00001

class MathLibTest : public ::testing::Test { };

""")

num = int(sys.argv[1])

expressions = generate_expressions(range(5), num, num)

for i, exp in enumerate(expressions):
    print(i, end=" ")

    test_case = f"""TEST_F(MathLibTest, Test{i + 1}) {{
    double Result;
    EXPECT_EQ(ParseExpressionToFloat(\"{exp.replace('**', '^')}\", &Result), """

    try:
        func = eval("lambda: " + exp)
        # with timeout(1):
        res = func()

        if isinstance(res, complex):
            raise ValueError

        if isinstance(res, int) and (res > 2147483647 or res < -2147483647):
            res = "{:.16e}".format(res)

        test_case += f"""SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, {res});
}}
"""
        print()
    except ZeroDivisionError:
        test_case += """SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
"""
        print("ZeroDivisionError")
    except ValueError:
        test_case += """SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
"""
        print("ValueError")
    except OverflowError:
        test_case += """SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
"""
        print("OverflowError")
    except SyntaxError:
        test_case += """SolveResult::InvalidExpression);
    EXPECT_TRUE(std::isnan(Result));
}
"""
        print("SyntaxError")
    except ArithmeticError:
        test_case += """SolveResult::UnknownError);
    EXPECT_TRUE(std::isnan(Result));
}
"""
        print("ArithmeticError")
    except TimeoutError:
        print("Timeout", exp)
        continue
    except TypeError:
        print("TypeError", exp)
        continue

    file.write(test_case)

file.close()
