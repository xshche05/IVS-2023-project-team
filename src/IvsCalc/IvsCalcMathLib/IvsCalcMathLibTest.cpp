/// THIS FILE IS AUTOGENERATED BY THE TOOL
///
/// UNLESS YOU KNOW WHAT YOU ARE DOING, 
/// MODIFYING THIS FILE IS NOT RECOMMENDED
///
/// Run generate_tests.py to regenerate this file

#include <gtest/gtest.h>
#include <gtest/gtest-spi.h>
#include <cmath>
#include "IvsCalcMathLib.h"

#define ERR_MARGIN 0.00001

class MathLibTest : public ::testing::Test { };

TEST_F(MathLibTest, Test1) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0) ^ (3))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0);
}
TEST_F(MathLibTest, Test2) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 * 4", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 8);
}
TEST_F(MathLibTest, Test3) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("4 + 2 * 4", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 12);
}
TEST_F(MathLibTest, Test4) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((3) ^ (2))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 9);
}
TEST_F(MathLibTest, Test5) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0) ^ (3)) * 2)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0);
}
TEST_F(MathLibTest, Test6) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 * 4 / 2", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4.0);
}
TEST_F(MathLibTest, Test7) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(4 + 2 * 4 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 12);
}
TEST_F(MathLibTest, Test8) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0) ^ (3)) * 2) * 2", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0);
}
TEST_F(MathLibTest, Test9) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 * 4 / 2 * 1", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4.0);
}
TEST_F(MathLibTest, Test10) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777216.0);
}
TEST_F(MathLibTest, Test11) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4) ^ (2 * 4 / 2 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4096.0);
}
TEST_F(MathLibTest, Test12) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0) ^ (3)) * 4 + 2 * 4", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 8);
}
TEST_F(MathLibTest, Test13) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("4 + 2 * 4 / 2 * 4 / 2 * 1", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 12.0);
}
TEST_F(MathLibTest, Test14) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -16777212.0);
}
TEST_F(MathLibTest, Test15) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4) ^ (2 * 4 / 2 * 1) + 0", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4096.0);
}
TEST_F(MathLibTest, Test16) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test17) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 12.0);
}
TEST_F(MathLibTest, Test18) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4096.0);
}
TEST_F(MathLibTest, Test19) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 2.8284271247461903);
}
TEST_F(MathLibTest, Test20) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -16777212.0);
}
TEST_F(MathLibTest, Test21) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((2 * 4) ^ (2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 64.0);
}
TEST_F(MathLibTest, Test22) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777216.0);
}
TEST_F(MathLibTest, Test23) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((4 + 2 * 4 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 3.4641016151377544);
}
TEST_F(MathLibTest, Test24) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -16777216.0);
}
TEST_F(MathLibTest, Test25) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test26) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4094.0);
}
TEST_F(MathLibTest, Test27) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 3.4641016151377544);
}
TEST_F(MathLibTest, Test28) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test29) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 20.0);
}
TEST_F(MathLibTest, Test30) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((0) ^ (3)) * 4 + 2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 8);
}
TEST_F(MathLibTest, Test31) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 3.4641016151377544);
}
TEST_F(MathLibTest, Test32) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 12.0);
}
TEST_F(MathLibTest, Test33) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -7.152557373046875e-07);
}
TEST_F(MathLibTest, Test34) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test35) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test36) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -3.4641016151377544);
}
TEST_F(MathLibTest, Test37) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -1.9868214925130207e-08);
}
TEST_F(MathLibTest, Test38) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -50331648.0);
}
TEST_F(MathLibTest, Test39) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0);
}
TEST_F(MathLibTest, Test40) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 64.0);
}
TEST_F(MathLibTest, Test41) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16.0);
}
TEST_F(MathLibTest, Test42) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4.47213595499958);
}
TEST_F(MathLibTest, Test43) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test44) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0) ^ (3)) * 4 + 2 * 4 - 3", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 5);
}
TEST_F(MathLibTest, Test45) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test46) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777213.0);
}
TEST_F(MathLibTest, Test47) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) * 4", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test48) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4.768372718899898e-07);
}
TEST_F(MathLibTest, Test49) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.125);
}
TEST_F(MathLibTest, Test50) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(4 + 2 * 4) ^ (((0) ^ (3)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1);
}
TEST_F(MathLibTest, Test51) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -0.4641016151377544);
}
TEST_F(MathLibTest, Test52) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777212.0);
}
TEST_F(MathLibTest, Test53) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -1.0);
}
TEST_F(MathLibTest, Test54) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-2 * 4 / 2 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4.0);
}
TEST_F(MathLibTest, Test55) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-((0) ^ (3)) * 4 + 2 * 4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 2.8284271247461903);
}
TEST_F(MathLibTest, Test56) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((0) ^ (3)) * 4 + 2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 2.8284271247461903);
}
TEST_F(MathLibTest, Test57) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 32.0);
}
TEST_F(MathLibTest, Test58) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.2886751345948129);
}
TEST_F(MathLibTest, Test59) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -0.0);
}
TEST_F(MathLibTest, Test60) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777216.0);
}
TEST_F(MathLibTest, Test61) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test62) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((4 + 2 * 4 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 3.4641016151377544);
}
TEST_F(MathLibTest, Test63) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.0);
}
TEST_F(MathLibTest, Test64) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test65) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777216.0);
}
TEST_F(MathLibTest, Test66) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 41.56921938165305);
}
TEST_F(MathLibTest, Test67) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -2.064765954639993e-07);
}
TEST_F(MathLibTest, Test68) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test69) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ (((0) ^ (3)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test70) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(4 + 2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 3.4641016151377544);
}
TEST_F(MathLibTest, Test71) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 3.0000000057354597);
}
TEST_F(MathLibTest, Test72) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 248832);
}
TEST_F(MathLibTest, Test73) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test74) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-2 * 4 / 2 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4.0);
}
TEST_F(MathLibTest, Test75) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(4 + 2 * 4 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -12);
}
TEST_F(MathLibTest, Test76) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -16777220.0);
}
TEST_F(MathLibTest, Test77) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / 4)", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test78) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 12.0);
}
TEST_F(MathLibTest, Test79) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.1547005383792517);
}
TEST_F(MathLibTest, Test80) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test81) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test82) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) + (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) * 4", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test83) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 6.447419590941251);
}
TEST_F(MathLibTest, Test84) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(4 + 2 * 4) / ((0) ^ (3)) * 4 + 2 * 4 - 3", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test85) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("0 * (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test86) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4094.0);
}
TEST_F(MathLibTest, Test87) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4.47213595499958);
}
TEST_F(MathLibTest, Test88) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(2 * 4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -2.8284271247461903);
}
TEST_F(MathLibTest, Test89) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 / (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -3.391932831489051);
}
TEST_F(MathLibTest, Test90) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test91) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test92) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.074569931823542);
}
TEST_F(MathLibTest, Test93) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-2 * 4 / 2 * 1) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -256.0);
}
TEST_F(MathLibTest, Test94) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test95) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0004436044186553659);
}
TEST_F(MathLibTest, Test96) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) / 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 3.0240562612162343);
}
TEST_F(MathLibTest, Test97) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -0.0);
}
TEST_F(MathLibTest, Test98) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt(2 * 4)) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 2.9999999837776703);
}
TEST_F(MathLibTest, Test99) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(2 * 4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -2.8284271247461903);
}
TEST_F(MathLibTest, Test100) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 8.0);
}
TEST_F(MathLibTest, Test101) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 2.539176951482754);
}
TEST_F(MathLibTest, Test102) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 201326544.0);
}
TEST_F(MathLibTest, Test103) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777232.0);
}
TEST_F(MathLibTest, Test104) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) + (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) * 4 / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test105) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test106) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 64.0);
}
TEST_F(MathLibTest, Test107) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.2886744193390756);
}
TEST_F(MathLibTest, Test108) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 7.464101615137754);
}
TEST_F(MathLibTest, Test109) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 281474976710656.0);
}
TEST_F(MathLibTest, Test110) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -50331647.0);
}
TEST_F(MathLibTest, Test111) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 861979.3330979577);
}
TEST_F(MathLibTest, Test112) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 2.0);
}
TEST_F(MathLibTest, Test113) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.7329972482293307);
}
TEST_F(MathLibTest, Test114) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -0.02405626121623441);
}
TEST_F(MathLibTest, Test115) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777200.0);
}
TEST_F(MathLibTest, Test116) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-2 * 4 / 2 * 1) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) / sqrt(sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -29.104247505522476);
}
TEST_F(MathLibTest, Test117) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.0366146496280775);
}
TEST_F(MathLibTest, Test118) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) * (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.2408064788027997);
}
TEST_F(MathLibTest, Test119) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test120) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4096.0);
}
TEST_F(MathLibTest, Test121) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) + ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -16777204.0);
}
TEST_F(MathLibTest, Test122) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -1.0);
}
TEST_F(MathLibTest, Test123) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((4 + 2 * 4 * 1)) + (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 45.033320996790806);
}
TEST_F(MathLibTest, Test124) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.0);
}
TEST_F(MathLibTest, Test125) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4095.999633789046);
}
TEST_F(MathLibTest, Test126) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(((0) ^ (3)) * 4 + 2 * 4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -2.8284271247461903);
}
TEST_F(MathLibTest, Test127) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -201326544.0);
}
TEST_F(MathLibTest, Test128) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -2.0);
}
TEST_F(MathLibTest, Test129) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test130) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 8.000000000000002);
}
TEST_F(MathLibTest, Test131) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) + (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test132) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test133) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 14188.958524148275);
}
TEST_F(MathLibTest, Test134) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test135) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -248832);
}
TEST_F(MathLibTest, Test136) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test137) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -16777213.0);
}
TEST_F(MathLibTest, Test138) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((0) ^ (3)) * 4 + 2 * 4) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4086.0);
}
TEST_F(MathLibTest, Test139) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(((0) ^ (3)) * 4 + 2 * 4) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.2886731115460844);
}
TEST_F(MathLibTest, Test140) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4) ^ (2 * 4 / 2 * 1) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -8.138020833333333e-05);
}
TEST_F(MathLibTest, Test141) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -3.8284271247461903);
}
TEST_F(MathLibTest, Test142) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 8.500716264765831);
}
TEST_F(MathLibTest, Test143) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test144) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test145) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 498.8306325798367);
}
TEST_F(MathLibTest, Test146) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(4 + 2 * 4 * 1) * (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test147) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 * 4 / 2 + ((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 281474976710660.0);
}
TEST_F(MathLibTest, Test149) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(1 + (4 + 2 * 4) ^ (((0) ^ (3))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 2);
}
TEST_F(MathLibTest, Test150) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + (sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test151) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4096.0);
}
TEST_F(MathLibTest, Test152) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ (((0) ^ (3))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test153) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) / 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ ((((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / 4)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test154) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 21.036614649628078);
}
TEST_F(MathLibTest, Test155) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test156) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test158) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4) ^ (2 * 4 / 2 * 1) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) / 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4096.0000406901045);
}
TEST_F(MathLibTest, Test159) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ (((0) ^ (3))))) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test160) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test161) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) ^ (sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test162) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -0.125);
}
TEST_F(MathLibTest, Test163) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -8.0);
}
TEST_F(MathLibTest, Test164) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 2.0);
}
TEST_F(MathLibTest, Test165) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test166) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((4 + 2 * 4 * 1)) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -2.4777185548337135e-06);
}
TEST_F(MathLibTest, Test167) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 117440492.0);
}
TEST_F(MathLibTest, Test168) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((3) ^ (2)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 3.0);
}
TEST_F(MathLibTest, Test169) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777216.0);
}
TEST_F(MathLibTest, Test170) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))) * ((0) ^ (3)) * 4 + 2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 8.0);
}
TEST_F(MathLibTest, Test171) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test172) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test173) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test174) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -15915236.666902043);
}
TEST_F(MathLibTest, Test175) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test176) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 7.464101615137754);
}
TEST_F(MathLibTest, Test177) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-((0) ^ (3)) * 4 + 2 * 4) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test178) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((4 + 2 * 4 * 1)) / (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test179) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 64.0);
}
TEST_F(MathLibTest, Test180) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) / 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -2.8990562612162343);
}
TEST_F(MathLibTest, Test181) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.074569931823542);
}
TEST_F(MathLibTest, Test182) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test183) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test184) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test185) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(((3) ^ (2)))) ^ (1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 3.0);
}
TEST_F(MathLibTest, Test186) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * sqrt(2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 40132.43516159965);
}
TEST_F(MathLibTest, Test187) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test188) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) / 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) * (4 + 2 * 4 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -36.16367513459481);
}
TEST_F(MathLibTest, Test189) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 * (0-sqrt(2 * 4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -8.485281368503111);
}
TEST_F(MathLibTest, Test190) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4096.0);
}
TEST_F(MathLibTest, Test191) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test192) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 7.152557373046875e-07);
}
TEST_F(MathLibTest, Test193) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test194) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 3.2612038749637415);
}
TEST_F(MathLibTest, Test195) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 + sqrt(4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 23.036614649628078);
}
TEST_F(MathLibTest, Test196) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4174707465216.0);
}
TEST_F(MathLibTest, Test197) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test198) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt(((3) ^ (2)))) ^ (1) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 24.000000000000007);
}
TEST_F(MathLibTest, Test199) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(4 + 2 * 4 * 1)) - (0-sqrt(4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -10.0);
}
TEST_F(MathLibTest, Test200) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -5.656854249492381);
}
TEST_F(MathLibTest, Test201) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0) ^ (3)) * 2) * 2 / ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test202) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test203) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test204) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(((3) ^ (2)))) ^ (1) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777215.0);
}
TEST_F(MathLibTest, Test205) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test206) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4.899504388565634e-56);
}
TEST_F(MathLibTest, Test207) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 332.5537550532244);
}
TEST_F(MathLibTest, Test208) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-2 * 4 / 2 * 1) + ((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -3.0);
}
TEST_F(MathLibTest, Test209) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777211.527864045);
}
TEST_F(MathLibTest, Test210) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * 2 * 4", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 32767.99707031237);
}
TEST_F(MathLibTest, Test211) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt((0-((0) ^ (3)) * 4 + 2 * 4)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -2.8284271247461903);
}
TEST_F(MathLibTest, Test212) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((0) ^ (3)) * 2) * 2)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test213) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -44.0);
}
TEST_F(MathLibTest, Test214) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.2886758498505502);
}
TEST_F(MathLibTest, Test215) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.6608983848622456);
}
TEST_F(MathLibTest, Test216) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2 * 1 - (0-(4 + 2 * 4 * 1)) - (0-sqrt(4)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 18.0);
}
TEST_F(MathLibTest, Test217) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0)) / ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -0.0);
}
TEST_F(MathLibTest, Test218) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 18516504013.10195);
}
TEST_F(MathLibTest, Test219) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(1 / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 5.960465543353357e-08);
}
TEST_F(MathLibTest, Test220) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4076.963385350372);
}
TEST_F(MathLibTest, Test221) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test222) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))) - sqrt((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test223) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-((0) ^ (3)) * 4 + 2 * 4) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0))) - (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 7.464101615137754);
}
TEST_F(MathLibTest, Test224) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -201326547.4641016);
}
TEST_F(MathLibTest, Test225) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 8.0);
}
TEST_F(MathLibTest, Test226) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - (0-((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test227) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -25.455844122715718);
}
TEST_F(MathLibTest, Test228) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * (0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test229) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(4 + 2 * 4) / ((0) ^ (3)) * 4 + 2 * 4 - 3 * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test230) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -18516504013.10195);
}
TEST_F(MathLibTest, Test232) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4))) + 2 * 4 / 2", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -18516504009.10195);
}
TEST_F(MathLibTest, Test233) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) / (1 + (4 + 2 * 4) ^ (((0) ^ (3))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 6.0);
}
TEST_F(MathLibTest, Test234) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -2.8284271247461903);
}
TEST_F(MathLibTest, Test235) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 * 4 / 2 + ((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) - (0-(4 + 2 * 4 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 281474976710672.0);
}
TEST_F(MathLibTest, Test236) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1) + (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -16777208.535898386);
}
TEST_F(MathLibTest, Test238) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -8.000000000000002);
}
TEST_F(MathLibTest, Test239) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(1 / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) - (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 5.960465543353357e-08);
}
TEST_F(MathLibTest, Test240) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(2 * 4) ^ (2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4096.0);
}
TEST_F(MathLibTest, Test241) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 3.4641016151377544);
}
TEST_F(MathLibTest, Test242) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 * (0-sqrt(2 * 4))) ^ (((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.0);
}
TEST_F(MathLibTest, Test243) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test244) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 512.7632868564075);
}
TEST_F(MathLibTest, Test245) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4096.0);
}
TEST_F(MathLibTest, Test246) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(4 + 2 * 4 / (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test247) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((3) ^ (2))) / (sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4194303.0);
}
TEST_F(MathLibTest, Test248) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)) * (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 9.072169267308618e-46);
}
TEST_F(MathLibTest, Test249) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4);
}
TEST_F(MathLibTest, Test250) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) * ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test251) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4) ^ (2 * 4 / 2 * 1) + 0 + (0-((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4088.0);
}
TEST_F(MathLibTest, Test252) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -248896.0);
}
TEST_F(MathLibTest, Test253) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test254) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4174707349732.667);
}
TEST_F(MathLibTest, Test255) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) / (1 / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 58117970.65081013);
}
TEST_F(MathLibTest, Test256) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4))) / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.6905989232414962);
}
TEST_F(MathLibTest, Test257) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) + (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test258) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test259) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (((0) ^ (3)) * 2) * 2 / ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test260) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)) * sqrt((sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -3530666927.4808636);
}
TEST_F(MathLibTest, Test261) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) - sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4083.5087506046275);
}
TEST_F(MathLibTest, Test262) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)) * (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2)))) + sqrt((2 * 4) ^ (2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 64.0);
}
TEST_F(MathLibTest, Test263) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((0) ^ (3)) * 2) * 2)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test264) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) / (4 + 2 * 4 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 5.333333333333333);
}
TEST_F(MathLibTest, Test265) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777216.0);
}
TEST_F(MathLibTest, Test266) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -0.0);
}
TEST_F(MathLibTest, Test267) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(2 * 4) - ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 14.82842712474619);
}
TEST_F(MathLibTest, Test268) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((0-((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4))) / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -1.6905989232414962);
}
TEST_F(MathLibTest, Test269) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4) ^ (2 * 4 / 2 * 1) + 0 + (0-((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4))) * sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -28671.997070312376);
}
TEST_F(MathLibTest, Test270) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) + sqrt(4 + 2 * 4)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test271) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) / (((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / 4))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test272) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((0) ^ (3)) * 4 + 2 * 4) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 + ((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) - (0-(4 + 2 * 4 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 281474976706578.0);
}
TEST_F(MathLibTest, Test273) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0) ^ (3)) * 2) * 2 / ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))) ^ (((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test274) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 + (0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -0.3391016151377544);
}
TEST_F(MathLibTest, Test275) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-((0) ^ (3)) * 4 + 2 * 4)) / (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) * ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test276) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test277) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 3.8003873077296255);
}
TEST_F(MathLibTest, Test278) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((4 + 2 * 4 / (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test279) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt(((0) ^ (3)) * 4 + 2 * 4) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) * (0-((0) ^ (3)) * 4 + 2 * 4) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4091.6906151076314);
}
TEST_F(MathLibTest, Test281) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test282) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) + (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test283) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -6.447419590941251);
}
TEST_F(MathLibTest, Test284) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4) ^ (2 * 4 / 2 * 1) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) - (0-sqrt(2 * 4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 2.828345744537857);
}
TEST_F(MathLibTest, Test285) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 7.464101615137754);
}
TEST_F(MathLibTest, Test286) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(2 * 4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -2.8284271247461903);
}
TEST_F(MathLibTest, Test287) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 201326547.4641016);
}
TEST_F(MathLibTest, Test288) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 2.3094010767585034);
}
TEST_F(MathLibTest, Test289) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) / (0-(4 + 2 * 4 * 1)) - (0-sqrt(4)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -25.71281292110203);
}
TEST_F(MathLibTest, Test290) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3) + (0-(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test291) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -50331656.0);
}
TEST_F(MathLibTest, Test292) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.3535533905932738);
}
TEST_F(MathLibTest, Test293) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - (0-sqrt(2 * 4)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4091.171572875254);
}
TEST_F(MathLibTest, Test294) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) + (((0) ^ (3)) * 2)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 8.000000000000002);
}
TEST_F(MathLibTest, Test295) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-(4 + 2 * 4 * 1)) - (0-sqrt(4)) + sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -8.925430068176459);
}
TEST_F(MathLibTest, Test296) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) - ((0-((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4))) / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test297) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(((0-((0) ^ (3)) * 4 + 2 * 4) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0))) - (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -7.464101615137754);
}
TEST_F(MathLibTest, Test298) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test299) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test300) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) - sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test301) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.0);
}
TEST_F(MathLibTest, Test302) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -6.82842712474619);
}
TEST_F(MathLibTest, Test303) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - (0-sqrt(2 * 4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 2.8284271247461903);
}
TEST_F(MathLibTest, Test304) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0) ^ (3)) * 2) * 2 / ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))) ^ (((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)) - (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test305) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - (0-((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test306) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))) - ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4)", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test307) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((sqrt(((0) ^ (3)) * 4 + 2 * 4) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) * (0-((0) ^ (3)) * 4 + 2 * 4) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test308) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-2 * 4 / 2 * 1) - 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -1.0000000057354592);
}
TEST_F(MathLibTest, Test309) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 50331633.17157288);
}
TEST_F(MathLibTest, Test310) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) / ((0) ^ (3))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test311) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -50331647.0);
}
TEST_F(MathLibTest, Test312) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((0) ^ (3)) * 2) * 2) * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -0.0);
}
TEST_F(MathLibTest, Test313) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) - (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -40.0);
}
TEST_F(MathLibTest, Test314) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-2 * 4 / 2 * 1))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test315) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) - sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt((((0) ^ (3)) * 2) * 2))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.0);
}
TEST_F(MathLibTest, Test316) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) - (0-((0) ^ (3)) * 4 + 2 * 4)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test317) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((0) ^ (3)) * 4 + 2 * 4 - 3)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 5);
}
TEST_F(MathLibTest, Test318) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test319) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) + (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test320) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test321) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / (((0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test322) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) - (0-((0) ^ (3)) * 4 + 2 * 4) / ((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test323) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ (((0) ^ (3)))) * (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test324) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4098.0);
}
TEST_F(MathLibTest, Test325) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test326) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (4 + 2 * 4 * 1) * (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test327) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -6.447419590941251);
}
TEST_F(MathLibTest, Test328) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + (sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test329) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)) * (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2)))) + sqrt((2 * 4) ^ (2 * 4 / 2 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 8.0);
}
TEST_F(MathLibTest, Test330) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -0.0004436044186553659);
}
TEST_F(MathLibTest, Test331) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - ((0-(4 + 2 * 4 * 1)) - (0-sqrt(4)) + sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 8.925429352920721);
}
TEST_F(MathLibTest, Test332) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) ^ ((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4))))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test333) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 / ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test334) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 / (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test335) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) ^ ((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)))) * (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test336) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-2 * 4 / 2 * 1) - 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test337) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 512.7632868564075);
}
TEST_F(MathLibTest, Test338) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-2 * 4 / 2 * 1) + ((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 50331645.0);
}
TEST_F(MathLibTest, Test340) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(((0) ^ (3)) * 4 + 2 * 4) - (0-((0) ^ (3)) * 4 + 2 * 4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -5.17157287525381);
}
TEST_F(MathLibTest, Test341) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) ^ ((2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test342) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test343) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0) ^ (3)) * 2) * 2 / ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))) ^ (((0-(4 + 2 * 4 * 1)) - (0-sqrt(4)) + sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test344) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ (((0) ^ (3)))) / sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test345) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) * (2 * 4) ^ (2 * 4 / 2 * 1) + 0", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 14188.960215604242);
}
TEST_F(MathLibTest, Test346) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) * sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) + (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) * 4)", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test347) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) / 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) * (4 + 2 * 4 * 1) * (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 7.589101615137754);
}
TEST_F(MathLibTest, Test348) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) - sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test349) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) * ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test350) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test351) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) / 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test352) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test353) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) / sqrt(((3) ^ (2))) / (sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 62549951949489.336);
}
TEST_F(MathLibTest, Test354) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / sqrt(((3) ^ (2))) / (sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -2.8284271247461903);
}
TEST_F(MathLibTest, Test355) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(4) - (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4098.0);
}
TEST_F(MathLibTest, Test356) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * (0-sqrt(4)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 33554426.0);
}
TEST_F(MathLibTest, Test358) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * (0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test359) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))) - sqrt((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) - ((2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - (0-((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test360) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test361) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test362) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((((0) ^ (3)) * 2) * 2) * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (2)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test363) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-((0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -201326547.4641016);
}
TEST_F(MathLibTest, Test364) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(4 + 2 * 4) / ((0) ^ (3)) * 4 + 2 * 4 - 3 / sqrt((0-((0) ^ (3)) * 4 + 2 * 4))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test365) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-(4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4174707962879.3833);
}
TEST_F(MathLibTest, Test366) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / (sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) / (4 + 2 * 4 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test367) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 / (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) / (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1)", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test368) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test369) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-2 * 4 / 2 * 1)) * ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / (sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) / (4 + 2 * 4 * 1)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test370) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) / 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) * (4 + 2 * 4 * 1) * (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 2.7548324114431635);
}
TEST_F(MathLibTest, Test371) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test372) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.8612097182041991);
}
TEST_F(MathLibTest, Test373) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -16777216.0);
}
TEST_F(MathLibTest, Test374) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(2 * 4 / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4.768372718899898e-07);
}
TEST_F(MathLibTest, Test375) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) - sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 / (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test376) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) + ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) * sqrt(((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -16777204.0);
}
TEST_F(MathLibTest, Test377) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt((0-2 * 4 / 2 * 1) - 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test378) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 * 4) ^ (2 * 4 / 2 * 1) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) - sqrt(((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -8.138020833333333e-05);
}
TEST_F(MathLibTest, Test379) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(4 + 2 * 4 * 1) * (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) / 2 * 4", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test380) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) / (0-(4 + 2 * 4 * 1)) - (0-sqrt(4))) / sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * 2 * 4", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -0.05022034222657609);
}
TEST_F(MathLibTest, Test381) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) + (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777276.0);
}
TEST_F(MathLibTest, Test382) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test383) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) + (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test384) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) ^ ((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) ^ ((2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test386) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) * ((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) ^ ((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4))))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test387) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test388) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ (((0) ^ (3)))) / sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test389) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test390) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0 * sqrt((0-((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test391) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test392) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-sqrt(2 * 4)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test393) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(4) - (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))) ^ (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 5.122113144592773e+30);
}
TEST_F(MathLibTest, Test394) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4174709073691.333);
}
TEST_F(MathLibTest, Test395) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(2 * 4)) + 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.17157288098926937);
}
TEST_F(MathLibTest, Test396) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test397) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) * sqrt((0-2 * 4 / 2 * 1))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test398) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0 + (2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 * (0-sqrt(2 * 4))) ^ (((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.0);
}
TEST_F(MathLibTest, Test399) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (0-(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test400) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -512.7632868564075);
}
TEST_F(MathLibTest, Test401) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0) ^ (3)) * 4 + 2 * 4 - 3 + sqrt(((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 503.8306325798367);
}
TEST_F(MathLibTest, Test402) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - (0-sqrt(2 * 4))) / sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) + (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test403) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test404) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test405) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((sqrt(((0) ^ (3)) * 4 + 2 * 4) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.5372830832494956);
}
TEST_F(MathLibTest, Test406) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) * (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.2408064788027997);
}
TEST_F(MathLibTest, Test407) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) - ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test408) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0-2 * 4 / 2 * 1) + ((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) ^ (((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test409) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) ^ (((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) / 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 7.046267455841087e+21);
}
TEST_F(MathLibTest, Test410) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -1.0366146496280775);
}
TEST_F(MathLibTest, Test411) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test412) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((4 + 2 * 4 * 1)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -23.65436543168373);
}
TEST_F(MathLibTest, Test413) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test414) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) - sqrt((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test415) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 50331646.82842712);
}
TEST_F(MathLibTest, Test416) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - ((0-(4 + 2 * 4 * 1)) - (0-sqrt(4)) + sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) + ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) ^ (((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) / 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 7.046267455841087e+21);
}
TEST_F(MathLibTest, Test417) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(4 + 2 * 4) ^ (((0) ^ (3))) * ((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 512.7632868564075);
}
TEST_F(MathLibTest, Test418) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 248832);
}
TEST_F(MathLibTest, Test419) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) + (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1)) * ((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test420) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0);
}
TEST_F(MathLibTest, Test421) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test422) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-(0-(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ (((0) ^ (3)))) / sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test423) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test424) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) - sqrt(2 * 4) - ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -201326534.82842714);
}
TEST_F(MathLibTest, Test425) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((0-2 * 4 / 2 * 1) - 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) / (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test426) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) - (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + (sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test427) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-(4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))) ^ ((((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test428) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test429) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test430) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-(0-((0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))) - (0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -3.4641016125679016);
}
TEST_F(MathLibTest, Test431) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) - ((0-((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4))) / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test432) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 + ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test433) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (((0) ^ (3)) * 2) * 2 / ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test434) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4076.963385350372);
}
TEST_F(MathLibTest, Test435) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(4 + 2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 3.4641016151377544);
}
TEST_F(MathLibTest, Test436) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) + (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))) - (((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))) - sqrt((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test437) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test438) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) * ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))) ^ ((2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - (0-sqrt(2 * 4)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test439) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)))) ^ ((0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test440) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt(((3) ^ (2)))) ^ (1) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4))) / sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test441) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)) * (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2)))) + sqrt((2 * 4) ^ (2 * 4 / 2 * 1))) + (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777296.0);
}
TEST_F(MathLibTest, Test442) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((2 * 4) ^ (2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 64.0);
}
TEST_F(MathLibTest, Test443) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) / 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) * (4 + 2 * 4 * 1) * (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) / (0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -7.589101615137754);
}
TEST_F(MathLibTest, Test444) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / 4) + (((0) ^ (3)) * 2))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test445) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1 * sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test446) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) - sqrt(((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) / 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) * (4 + 2 * 4 * 1) * (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -2.7548324114431635);
}
TEST_F(MathLibTest, Test447) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -16.0);
}
TEST_F(MathLibTest, Test449) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.537284300290894);
}
TEST_F(MathLibTest, Test450) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) ^ (sqrt(4 + 2 * 4)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test451) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(2 * 4) - ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) - (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -25.17157287525381);
}
TEST_F(MathLibTest, Test452) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0004436044186553659);
}
TEST_F(MathLibTest, Test453) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 / ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) * 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test454) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt((4 + 2 * 4 * 1))) ^ ((sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test455) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test456) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / (sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) / (4 + 2 * 4 * 1)))) ^ (sqrt(sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test457) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test458) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test459) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) ^ ((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) ^ ((2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)))) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test460) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) / (0-(4 + 2 * 4 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.5690355937288492);
}
TEST_F(MathLibTest, Test461) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) ^ ((2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test462) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) + sqrt(4) - (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4098.0);
}
TEST_F(MathLibTest, Test463) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) * (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 7.152557373046875e-07);
}
TEST_F(MathLibTest, Test464) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(2 * 4 / 2 * 1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 2.0);
}
TEST_F(MathLibTest, Test465) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test466) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt((0-2 * 4 / 2 * 1) - 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) / (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)) + (0-((0) ^ (3)) * 4 + 2 * 4))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test467) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 3.4641016151377544);
}
TEST_F(MathLibTest, Test468) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test469) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) / 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test470) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) * (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test471) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test472) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-((0) ^ (3)) * 4 + 2 * 4) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 + ((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) - (0-(4 + 2 * 4 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777215.999878466);
}
TEST_F(MathLibTest, Test473) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-(0-((0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))) - (0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) - ((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -18516504016.56605);
}
TEST_F(MathLibTest, Test474) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) - sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt((((0) ^ (3)) * 2) * 2)) - sqrt((4 + 2 * 4 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -2.4641016151377544);
}
TEST_F(MathLibTest, Test475) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)) * (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2)))) + sqrt((2 * 4) ^ (2 * 4 / 2 * 1))) + (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4096.0097656133585);
}
TEST_F(MathLibTest, Test476) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((0-2 * 4 / 2 * 1)) * ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / (sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) / (4 + 2 * 4 * 1))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test477) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - sqrt((0-2 * 4 / 2 * 1)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test478) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) + (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test479) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt((0-((0) ^ (3)) * 4 + 2 * 4))) * (1 + (4 + 2 * 4) ^ (((0) ^ (3)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -5.656854249492381);
}
TEST_F(MathLibTest, Test480) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0 * sqrt((0-((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0))) - ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test481) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) / 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ ((0-(2 * 4) ^ (2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test482) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) - ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 201326550.82842714);
}
TEST_F(MathLibTest, Test483) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((1 / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.00024414064682787577);
}
TEST_F(MathLibTest, Test484) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -201326545.0);
}
TEST_F(MathLibTest, Test485) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) - sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) + (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test486) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) - (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -29.460823048517245);
}
TEST_F(MathLibTest, Test487) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) * ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))) ^ ((2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - (0-sqrt(2 * 4))))) - ((2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - (0-((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test488) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -0.015625);
}
TEST_F(MathLibTest, Test489) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2))))) - (((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) - sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 / (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test490) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + (0-((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)))) ^ (2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 68317612730.40842);
}
TEST_F(MathLibTest, Test491) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (0-(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test492) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) + (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1)) * ((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4))) ^ ((0-(0-((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test493) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 + ((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) * (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -0.9999992847442627);
}
TEST_F(MathLibTest, Test494) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt((0-2 * 4 / 2 * 1)) * ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / (sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) / (4 + 2 * 4 * 1))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) - sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test495) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 + (((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) ^ ((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)))) * (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test496) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((sqrt((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)))) ^ ((0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test497) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) * (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 2.2408064788027997);
}
TEST_F(MathLibTest, Test498) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(2)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.4142135623730951);
}
TEST_F(MathLibTest, Test499) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 64.02405626121623);
}
TEST_F(MathLibTest, Test500) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(((3) ^ (2))) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 50331636.0);
}
TEST_F(MathLibTest, Test501) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) / (0-(4 + 2 * 4 * 1)) - (0-sqrt(4))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test502) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(2 * 4 / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) - (0-((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 248768.00000047684);
}
TEST_F(MathLibTest, Test503) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-(4 + 2 * 4 * 1)) - (0-sqrt(4)) - (sqrt(((0) ^ (3)) * 4 + 2 * 4) - (0-((0) ^ (3)) * 4 + 2 * 4)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4.82842712474619);
}
TEST_F(MathLibTest, Test504) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((0-(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ (((0) ^ (3)))) * (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test505) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))) / (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test506) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * 2 * 4 + sqrt(4 + 2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 32771.461171927505);
}
TEST_F(MathLibTest, Test507) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-(0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))) ^ (((1 / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test508) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-(0-((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))) * sqrt(((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) / 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) * (4 + 2 * 4 * 1) * (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test509) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - (0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test510) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) - (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + (sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 * (0-sqrt(2 * 4))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test511) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) - ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -201326550.82842714);
}
TEST_F(MathLibTest, Test512) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((4 + 2 * 4 * 1)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -0.00577499156046966);
}
TEST_F(MathLibTest, Test513) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0) ^ (3)) * 4 + 2 * 4 - 3 + ((((0) ^ (3)) * 2) * 2 / ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))) ^ (((0-(4 + 2 * 4 * 1)) - (0-sqrt(4)) + sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test514) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(4 * (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - (0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test515) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test516) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) - ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))) ^ ((sqrt(((0) ^ (3)) * 4 + 2 * 4) - (0-((0) ^ (3)) * 4 + 2 * 4)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test517) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))) - ((0) ^ (3)) * 4 + 2 * 4 - 3 + sqrt(((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test518) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) + sqrt((4 + 2 * 4 * 1)) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777215.999997523);
}
TEST_F(MathLibTest, Test519) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-(0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))) ^ (((1 / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)))) / sqrt((0-((0) ^ (3)) * 4 + 2 * 4)) / (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) * ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test521) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) ^ (sqrt(((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test522) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((sqrt(((0) ^ (3)) * 4 + 2 * 4) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)))) / (sqrt(((3) ^ (2))) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.0674858318722157e-08);
}
TEST_F(MathLibTest, Test523) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)) - (((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) / (0-(4 + 2 * 4 * 1)) - (0-sqrt(4))) / sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * 2 * 4", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test524) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) * (0-(((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test525) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (1)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4174707345655.7036);
}
TEST_F(MathLibTest, Test526) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) * (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + (sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test527) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) ^ ((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) ^ ((2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)))) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0) ^ (sqrt((0-((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test528) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((sqrt((4 + 2 * 4 * 1))) ^ ((sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test529) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) - (0-((0) ^ (3)) * 4 + 2 * 4)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test531) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((1 / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))) * sqrt((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) / (0-(4 + 2 * 4 * 1)) - (0-sqrt(4)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test532) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -67108843.49928374);
}
TEST_F(MathLibTest, Test533) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2))))) - (((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) - sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 / (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test534) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + (sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test535) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((4 + 2 * 4 / (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))))) ^ (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test536) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1 * sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test537) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((0-2 * 4 / 2 * 1) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) / sqrt(sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 29.104247505522476);
}
TEST_F(MathLibTest, Test538) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) ^ (sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) + (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test539) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))) / sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) - (0-((0) ^ (3)) * 4 + 2 * 4)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test540) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test541) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((sqrt(((0) ^ (3)) * 4 + 2 * 4) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) * (0-((0) ^ (3)) * 4 + 2 * 4) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) * (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - (0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test542) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((0-(4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))) ^ ((((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))) ^ (((sqrt((0-2 * 4 / 2 * 1)) * ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / (sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) / (4 + 2 * 4 * 1))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) - sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test543) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4) ^ (2 * 4 / 2 * 1) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 8.138020833333333e-05);
}
TEST_F(MathLibTest, Test544) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) / 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) * (4 + 2 * 4 * 1) * (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -2.7548324114431635);
}
TEST_F(MathLibTest, Test546) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) ^ ((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) ^ ((2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)))) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 - ((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test547) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3) + (0-(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))) / ((((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / 4) + (((0) ^ (3)) * 2))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test548) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) + sqrt(4 + 2 * 4) * (0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test549) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) + ((0-(0-((0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))) - (0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) - ((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -18315177469.10195);
}
TEST_F(MathLibTest, Test551) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * (0-sqrt(4))) * (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3) + (0-(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test552) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 2.8284271247461903);
}
TEST_F(MathLibTest, Test553) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) + sqrt((4 + 2 * 4 * 1)) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4095.9999999996976);
}
TEST_F(MathLibTest, Test554) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((0-((0) ^ (3)) * 4 + 2 * 4)) / (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) * ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) / sqrt(((sqrt(((0) ^ (3)) * 4 + 2 * 4) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) * (0-((0) ^ (3)) * 4 + 2 * 4) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test555) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-(0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test556) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(((0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test557) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.9494582087671501);
}
TEST_F(MathLibTest, Test558) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 7.922816251426434e+28);
}
TEST_F(MathLibTest, Test559) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 * (0-sqrt(2 * 4))) ^ (((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0))) + (0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -1.8284271247461903);
}
TEST_F(MathLibTest, Test560) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) + sqrt(4) - (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))) ^ (sqrt((4 + 2 * 4 / (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test561) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt((sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -14188.958524148275);
}
TEST_F(MathLibTest, Test562) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) / (0-(0-((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test563) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 + (0-((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -252990.0);
}
TEST_F(MathLibTest, Test564) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) ^ ((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) ^ ((2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)))) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 * sqrt((4 + 2 * 4 / (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test566) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) - sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt((((0) ^ (3)) * 2) * 2)) + 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -50331646.0);
}
TEST_F(MathLibTest, Test567) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) / (0-(4 + 2 * 4 * 1)) + (((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test568) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1) - (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 10.928203230275509);
}
TEST_F(MathLibTest, Test569) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 - ((0) ^ (3)) * 4 + 2 * 4", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 11.00000000573546);
}
TEST_F(MathLibTest, Test570) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test571) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) + sqrt((4 + 2 * 4 * 1)) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) * ((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) - sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt((((0) ^ (3)) * 2) * 2)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777215.999997523);
}
TEST_F(MathLibTest, Test572) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2 + ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test573) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(4 + 2 * 4 * 1) * (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - ((((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) - sqrt((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test574) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * (((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)) * (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2)))) + sqrt((2 * 4) ^ (2 * 4 / 2 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test575) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) + (2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - (0-sqrt(2 * 4)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test576) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(4) - (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))) ^ (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) - sqrt(((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test577) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-2 * 4 / 2 * 1) * ((0 * sqrt((0-((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0))) - ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test578) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) + ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) - (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -16777204.0);
}
TEST_F(MathLibTest, Test579) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-(2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1))) ^ (((((0) ^ (3)) * 2) * 2 / ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))) ^ (((0-(4 + 2 * 4 * 1)) - (0-sqrt(4)) + sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test580) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((sqrt(((0) ^ (3)) * 4 + 2 * 4) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)))) / (sqrt(((3) ^ (2))) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.667946612300337e-10);
}
TEST_F(MathLibTest, Test581) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 - ((0) ^ (3)) * 4 + 2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 3.316624791220053);
}
TEST_F(MathLibTest, Test582) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(4) - (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))) ^ (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) - sqrt(((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1)) + (0-(4 + 2 * 4 * 1))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test583) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) * (2 * 4) ^ (2 * 4 / 2 * 1) + 0 / (((0-2 * 4 / 2 * 1) + ((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 14188.960215604242);
}
TEST_F(MathLibTest, Test584) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4098.0);
}
TEST_F(MathLibTest, Test585) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 * (0-sqrt(2 * 4)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test586) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((sqrt((sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test587) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) / 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ ((((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / 4))) * (sqrt((0-((0) ^ (3)) * 4 + 2 * 4)) / (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) * ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) / sqrt(((sqrt(((0) ^ (3)) * 4 + 2 * 4) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) * (0-((0) ^ (3)) * 4 + 2 * 4) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test588) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 * 4) ^ (2 * 4 / 2 * 1) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) - sqrt(((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) - (4 + 2 * 4) ^ (((0) ^ (3))) * ((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -512.7633682366159);
}
TEST_F(MathLibTest, Test589) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) - ((0-((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4))) / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) / (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) * (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test590) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 2.732050807568877);
}
TEST_F(MathLibTest, Test591) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 / ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) * 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) * (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) * ((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) ^ ((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test592) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) + (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))) - (((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))) - sqrt((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test593) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((3) ^ (2))) + sqrt(((0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))) / sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) - (0-((0) ^ (3)) * 4 + 2 * 4)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test594) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((((0) ^ (3)) * 2) * 2) * ((((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))) - sqrt((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) - ((2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - (0-((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test595) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-sqrt(4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -0.14433828255314377);
}
TEST_F(MathLibTest, Test596) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) + (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1)) * ((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4))) ^ ((0-(0-((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))))) - sqrt((0-((0) ^ (3)) * 4 + 2 * 4)) / (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) * ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test597) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 64.02405626121623);
}
TEST_F(MathLibTest, Test598) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)) ^ (sqrt(2 * 4) - ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.3527965081427914e+107);
}
TEST_F(MathLibTest, Test599) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) / sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 / (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) / (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1)", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test600) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) / (0-(4 + 2 * 4 * 1)) + (((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2)))) - sqrt((0-sqrt(2 * 4)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test601) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((4 + 2 * 4 * 1)) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (0-(0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 2.8284246470276355);
}
TEST_F(MathLibTest, Test602) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777212.0);
}
TEST_F(MathLibTest, Test603) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) + ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) ^ (sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test604) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))) ^ (sqrt(2))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test605) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt(((3) ^ (2)))) ^ (1)) ^ (((0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * (0-sqrt(4))) * (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3) + (0-(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test606) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + sqrt((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test607) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) - ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test608) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) + (((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) ^ ((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) ^ ((2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)))) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0) ^ (sqrt((0-((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test609) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) / (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test610) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((4 + 2 * 4 * 1)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) + ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) * sqrt(((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777223.464101613);
}
TEST_F(MathLibTest, Test611) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-2 * 4 / 2 * 1) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) / sqrt(sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) / (0-2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 7.276061876380619);
}
TEST_F(MathLibTest, Test612) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) * ((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 551.0000101989051);
}
TEST_F(MathLibTest, Test613) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 / (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3) - ((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) - sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt((((0) ^ (3)) * 2) * 2)) - sqrt((4 + 2 * 4 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -7.856034446626805);
}
TEST_F(MathLibTest, Test614) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * 2 * 4 + sqrt(4 + 2 * 4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 181.02889595842842);
}
TEST_F(MathLibTest, Test615) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 * 4) ^ (2 * 4 / 2 * 1) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) - sqrt(2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -2.0000813802083335);
}
TEST_F(MathLibTest, Test616) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) + (0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.984375);
}
TEST_F(MathLibTest, Test617) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test618) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((1 / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))) ^ (((0-2 * 4 / 2 * 1) + ((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4.722363949595308e+21);
}
TEST_F(MathLibTest, Test619) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) * ((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) ^ ((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)))) * (sqrt(((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))))) ^ (2 * 4)", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test620) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -3.4641016151377544);
}
TEST_F(MathLibTest, Test621) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))) * (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test622) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - (0-((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))) - (0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test623) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test624) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) / (sqrt(((0) ^ (3)) * 4 + 2 * 4) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test625) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (((0) ^ (3)) * 2) * 2 / ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test626) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-sqrt((0-((0) ^ (3)) * 4 + 2 * 4))) * (1 + (4 + 2 * 4) ^ (((0) ^ (3))))) + (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test627) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((0-2 * 4 / 2 * 1) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) / sqrt(sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) / (0-2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 2.697417631065056);
}
TEST_F(MathLibTest, Test628) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt(((0) ^ (3)) * 4 + 2 * 4) - (0-((0) ^ (3)) * 4 + 2 * 4)) / (((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / (sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) / (4 + 2 * 4 * 1)))) ^ (sqrt(sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test629) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) * (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * sqrt((0-2 * 4 / 2 * 1)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test630) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) + (0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) * sqrt((0-sqrt(2 * 4))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test631) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) / (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (((2 * 4) ^ (2 * 4 / 2 * 1) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) - sqrt(2 * 4 / 2 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test632) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) ^ ((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) ^ ((2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)))) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0) ^ (sqrt((0-((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4)))))) / (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1 * sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test633) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(2) / (0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0027621358640099515);
}
TEST_F(MathLibTest, Test634) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -63.97594373878376);
}
TEST_F(MathLibTest, Test635) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) - sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) + (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 / (0-sqrt((0-((0) ^ (3)) * 4 + 2 * 4)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test636) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 7.152557373046875e-07);
}
TEST_F(MathLibTest, Test638) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.2886758498505502);
}
TEST_F(MathLibTest, Test639) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) * (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + (sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test640) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0-((0) ^ (3)) * 4 + 2 * 4) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0))) - (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) + (((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) - sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 / (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test641) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - (0-sqrt(2 * 4)) - ((0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * (0-sqrt(4)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -33554423.171572875);
}
TEST_F(MathLibTest, Test642) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))) * (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))) - ((sqrt((0-2 * 4 / 2 * 1)) * ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / (sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) / (4 + 2 * 4 * 1))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) - sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test643) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(4 + 2 * 4) / ((0) ^ (3)) * 4 + 2 * 4 - 3 * (0-sqrt((0-((0) ^ (3)) * 4 + 2 * 4)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test644) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) * sqrt((0-2 * 4 / 2 * 1)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test645) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.0366146496280775);
}
TEST_F(MathLibTest, Test646) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 * (0-sqrt(2 * 4))) * ((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test647) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 * 4 / 2 * 1 * ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -15.313708498984761);
}
TEST_F(MathLibTest, Test648) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 2.8284271247461903);
}
TEST_F(MathLibTest, Test649) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((((0-2 * 4 / 2 * 1) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) / sqrt(sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) / (0-2 * 4 / 2 * 1)))) ^ ((sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) * ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test650) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt((sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) + ((2 * 4) ^ (2 * 4 / 2 * 1) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) - (0-sqrt(2 * 4)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -14186.130178403737);
}
TEST_F(MathLibTest, Test651) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) + (((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) ^ ((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) ^ ((2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)))) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0) ^ (sqrt((0-((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4)))))) * sqrt((0-(((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) + (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test652) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) / (1 / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))) ^ ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.0);
}
TEST_F(MathLibTest, Test653) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) ^ ((((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test654) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 * (0-sqrt(2 * 4))) / (((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) / (0-(4 + 2 * 4 * 1)) + (((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2)))) - sqrt((0-sqrt(2 * 4)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test655) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) / 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) * (4 + 2 * 4 * 1))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test656) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3) + (0-(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))) / ((((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / 4) + (((0) ^ (3)) * 2)) / sqrt((4 + 2 * 4 * 1))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test657) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-(((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) + (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test658) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2) ^ (((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)) * (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.0);
}
TEST_F(MathLibTest, Test659) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 248832);
}
TEST_F(MathLibTest, Test660) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)) / (0-(((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test661) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(1 + (4 + 2 * 4) ^ (((0) ^ (3)))) * (((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))) - sqrt((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test662) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test663) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 201322451.4641016);
}
TEST_F(MathLibTest, Test664) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(4 + 2 * 4) - (0-(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ (((0) ^ (3))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test666) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) - (1 / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777231.99999994);
}
TEST_F(MathLibTest, Test667) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + (sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) + sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test668) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(4)) ^ ((1 + (4 + 2 * 4) ^ (((0) ^ (3)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4.0);
}
TEST_F(MathLibTest, Test669) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - (0-sqrt(2 * 4)) + ((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))) * ((0) ^ (3)) * 4 + 2 * 4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 10.82842712474619);
}
TEST_F(MathLibTest, Test671) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * (0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test672) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) * (0-(0-((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test673) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) + (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))) - (((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))) - sqrt((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) - (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test674) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -16777212.0);
}
TEST_F(MathLibTest, Test675) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test676) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt(((0) ^ (3)) * 4 + 2 * 4) - (0-((0) ^ (3)) * 4 + 2 * 4)) / (((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / (sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) / (4 + 2 * 4 * 1)))) ^ (sqrt(sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test677) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(4 + 2 * 4) - (0-(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ (((0) ^ (3)))) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test678) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(((0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))) - (0-(0-(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ (((0) ^ (3)))) / sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test679) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) - ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1)) * (sqrt(((0) ^ (3)) * 4 + 2 * 4) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 58117561.86448298);
}
TEST_F(MathLibTest, Test680) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 + (0-(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ (((0) ^ (3)))) / sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test681) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) ^ ((0-(4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test682) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -2.3094010767585034);
}
TEST_F(MathLibTest, Test683) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -498.8306325798367);
}
TEST_F(MathLibTest, Test684) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) - ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1)) * (sqrt(((0) ^ (3)) * 4 + 2 * 4) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) * (((0-2 * 4 / 2 * 1) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) / sqrt(sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) / (0-2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 422866976.2303567);
}
TEST_F(MathLibTest, Test685) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-(0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))) ^ (((1 / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)))) / sqrt((0-((0) ^ (3)) * 4 + 2 * 4)) / (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) * ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test686) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 - ((0) ^ (3)) * 4 + 2 * 4)) ^ ((0-(0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) * (0-(0-((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test687) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) * sqrt((4 + 2 * 4 * 1)) / (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test688) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 - ((0) ^ (3)) * 4 + 2 * 4 + sqrt((0-((0) ^ (3)) * 4 + 2 * 4)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 13.82842713048165);
}
TEST_F(MathLibTest, Test689) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 / (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3) - ((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) - sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt((((0) ^ (3)) * 2) * 2)) - sqrt((4 + 2 * 4 * 1)))) ^ ((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) / (0-(4 + 2 * 4 * 1)) - (0-sqrt(4))) / sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * 2 * 4))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test690) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) * ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))) ^ ((2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - (0-sqrt(2 * 4))))) - ((2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - (0-((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))) + sqrt(((3) ^ (2))) + sqrt(((0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))) / sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) - (0-((0) ^ (3)) * 4 + 2 * 4)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test691) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0-((0) ^ (3)) * 4 + 2 * 4) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0))) - (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) + (((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) - sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 / (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)))) + sqrt(2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 - ((0) ^ (3)) * 4 + 2 * 4)", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test692) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - (0-sqrt(2 * 4)) + ((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))) * ((0) ^ (3)) * 4 + 2 * 4) + (4 + 2 * 4 * 1) * (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test693) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test694) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -50331646.82842712);
}
TEST_F(MathLibTest, Test695) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) * sqrt((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) * sqrt((0-2 * 4 / 2 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test696) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) ^ ((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.9999998717312419);
}
TEST_F(MathLibTest, Test697) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - sqrt((0-2 * 4 / 2 * 1))) - ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / sqrt(((3) ^ (2))) / (sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test698) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -1.074569931823542);
}
TEST_F(MathLibTest, Test699) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -6.447419590941251);
}
TEST_F(MathLibTest, Test700) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - ((0-(4 + 2 * 4 * 1)) - (0-sqrt(4)) + sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) - (sqrt((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) ^ (sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) + (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test701) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 + sqrt((4 + 2 * 4 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 5.464101615137754);
}
TEST_F(MathLibTest, Test702) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((0-(((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test703) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((((0-(4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))) ^ ((((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))) ^ (((sqrt((0-2 * 4 / 2 * 1)) * ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / (sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) / (4 + 2 * 4 * 1))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) - sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))) * (0-(0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test704) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 + (((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) ^ ((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)))) * (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)) * sqrt(((sqrt(((0) ^ (3)) * 4 + 2 * 4) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) * (0-((0) ^ (3)) * 4 + 2 * 4) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test705) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((2 * 4) ^ (2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 64.0);
}
TEST_F(MathLibTest, Test706) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))) * (sqrt((0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) - sqrt(((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) / 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) * (4 + 2 * 4 * 1) * (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -138655252.00426152);
}
TEST_F(MathLibTest, Test707) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt(((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1))) ^ ((sqrt(((0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))) - (0-(0-(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ (((0) ^ (3)))) / sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test708) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) + (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))) + (sqrt(sqrt(((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))) * (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test709) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test710) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-(4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))) ^ ((((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) + (0-(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) * (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + (sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test711) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((sqrt((sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test712) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(sqrt(4) - (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))) ^ (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) - sqrt(((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test713) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) - (0-sqrt(((0) ^ (3)) * 4 + 2 * 4))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test714) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test715) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) / (0-(4 + 2 * 4 * 1)) - (0-sqrt(4))) / sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * 2 * 4)", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test716) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) * 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 + (0-((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -253004.89483918188);
}
TEST_F(MathLibTest, Test717) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - ((0-(4 + 2 * 4 * 1)) - (0-sqrt(4)) + sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) + ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) ^ (((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) / 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))) ^ (((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) - (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test718) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 / ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) * 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - 2 + (((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) ^ ((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)))) * (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)) * sqrt(((sqrt(((0) ^ (3)) * 4 + 2 * 4) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) * (0-((0) ^ (3)) * 4 + 2 * 4) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test719) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) / (1 + (4 + 2 * 4) ^ (((0) ^ (3))))) ^ ((((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))) - ((0) ^ (3)) * 4 + 2 * 4 - 3 + sqrt(((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test720) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-(0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))) ^ (((1 / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)))) / (0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test721) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((4 + 2 * 4 * 1)) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((0-(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test722) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-(0-((0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))) - (0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) - ((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)) - sqrt((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -18516504016.919605);
}
TEST_F(MathLibTest, Test724) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) / (0-(4 + 2 * 4 * 1)) - (0-sqrt(4)))) - 2 + sqrt((4 + 2 * 4 * 1))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test725) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4 + 2 * 4 * 1) * (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - ((((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) - sqrt((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) - (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test726) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test727) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-((0) ^ (3)) * 4 + 2 * 4) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4082.5358983848623);
}
TEST_F(MathLibTest, Test728) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((0-(0-((0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))) - (0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) - ((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)) - sqrt((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test730) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)) * (sqrt((4 + 2 * 4 / (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))))) ^ (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test731) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) ^ (((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2)", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test732) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-((0) ^ (3)) * 4 + 2 * 4) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 + ((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) - (0-(4 + 2 * 4 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777215.999878466);
}
TEST_F(MathLibTest, Test733) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) ^ ((sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) / (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (((2 * 4) ^ (2 * 4 / 2 * 1) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) - sqrt(2 * 4 / 2 * 1)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test734) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0-((0) ^ (3)) * 4 + 2 * 4) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0))) - (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) + (((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) - sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 / (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)))) + sqrt(2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 - ((0) ^ (3)) * 4 + 2 * 4) + (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test735) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) - (0-(0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test736) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) ^ ((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)))) * (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2))) ^ (((0-(4 + 2 * 4 * 1)) - (0-sqrt(4)) - (sqrt(((0) ^ (3)) * 4 + 2 * 4) - (0-((0) ^ (3)) * 4 + 2 * 4))))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test737) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))) - ((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2))))) - (((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) - sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 / (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test738) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt((0-2 * 4 / 2 * 1) - 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))) ^ (sqrt(2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 - ((0) ^ (3)) * 4 + 2 * 4))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test739) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-sqrt(2 * 4)) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) + sqrt((4 + 2 * 4 * 1)) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777218.999997508);
}
TEST_F(MathLibTest, Test740) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / 2 / ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) * 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) * (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) * ((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) ^ ((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test742) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt((0-sqrt(2 * 4))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test743) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((0-((0) ^ (3)) * 4 + 2 * 4) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 + ((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) - (0-(4 + 2 * 4 * 1)))) ^ (((2 * 4) ^ (2 * 4 / 2 * 1) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) / 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test744) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) + ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test745) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 / (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3) - ((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) - sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt((((0) ^ (3)) * 2) * 2)) - sqrt((4 + 2 * 4 * 1)))) ^ ((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) / (0-(4 + 2 * 4 * 1)) - (0-sqrt(4))) / sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * 2 * 4)) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test746) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -3.4641016151377544);
}
TEST_F(MathLibTest, Test747) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test748) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) + (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))) + (sqrt(sqrt(((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))) * (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)))) ^ (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) - sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt((((0) ^ (3)) * 2) * 2)) + 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test749) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 6.447419590941251);
}
TEST_F(MathLibTest, Test750) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ ((((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) ^ ((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) ^ ((2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)))) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0) ^ (sqrt((0-((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4)))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test751) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + (0-((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4))) * sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) - sqrt((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) / (0-(4 + 2 * 4 * 1)) - (0-sqrt(4)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test752) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)))) ^ ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1 * sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test753) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))) / (sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))) / (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test754) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1) - ((((0-2 * 4 / 2 * 1) + ((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) ^ (((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test755) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3) + (0-(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))) / ((((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / 4) + (((0) ^ (3)) * 2)) / sqrt((4 + 2 * 4 * 1)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test756) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) - (0-(((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -7.152557373046875e-07);
}
TEST_F(MathLibTest, Test757) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0-(4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))) ^ ((((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test758) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) / (0-(4 + 2 * 4 * 1)) + (((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test759) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0-2 * 4 / 2 * 1) + ((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) + (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) * ((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) ^ ((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)))) * (sqrt(((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))))) ^ (2 * 4))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test760) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))) + (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) * (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -201326543.7591935);
}
TEST_F(MathLibTest, Test761) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))) * ((0-sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -1604324.3116530932);
}
TEST_F(MathLibTest, Test762) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((sqrt((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)))) ^ ((0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1))) - sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test763) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (1) - sqrt((sqrt((sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test764) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 + ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test765) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.8612097182041991);
}
TEST_F(MathLibTest, Test766) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-(0-((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test767) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) + ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) ^ (sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))) - (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) ^ (sqrt(((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test768) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) / sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 / (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) / (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) * (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test770) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0) ^ (3)) * 2) * 2 / ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))) ^ (((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)) - (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) * (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3) + (0-(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test771) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - ((0-(4 + 2 * 4 * 1)) - (0-sqrt(4)) + sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) - (sqrt((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) ^ (sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) + (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test772) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test773) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1) + (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - ((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) - sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt((((0) ^ (3)) * 2) * 2)) + 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -67108856.53589839);
}
TEST_F(MathLibTest, Test774) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0) ^ (3)) * 2) * 2 * sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test775) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((((0-2 * 4 / 2 * 1) + ((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) ^ (((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test776) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt((4 + 2 * 4 / (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))))) ^ (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) + 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / 2 / ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) * 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) * (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) * ((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) ^ ((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test777) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test778) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test779) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (4 + 2 * 4) ^ (((0) ^ (3)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test780) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0 + (2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 * (0-sqrt(2 * 4))) ^ (((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)))) * ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((sqrt((sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2))))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test781) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 2.3094010767585034);
}
TEST_F(MathLibTest, Test782) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt(((0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test783) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) * ((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) ^ ((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)))) + sqrt(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2)))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test784) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) + sqrt(4) - (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0)) - (4 * (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - (0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4098.0);
}
TEST_F(MathLibTest, Test785) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0) * (0-((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test787) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((sqrt((0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test788) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) * ((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) ^ ((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)))) + sqrt(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))) - (1 + (4 + 2 * 4) ^ (((0) ^ (3))))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test789) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))) + (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test790) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))) / (sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))) / (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) * sqrt((4 + 2 * 4 * 1)) / (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test791) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - (((0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test792) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(sqrt((0-((0) ^ (3)) * 4 + 2 * 4) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 + ((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) - (0-(4 + 2 * 4 * 1)))) ^ (((2 * 4) ^ (2 * 4 / 2 * 1) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) / 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test793) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * (((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)) * (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2)))) + sqrt((2 * 4) ^ (2 * 4 / 2 * 1))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test794) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 3.4641016151377544);
}
TEST_F(MathLibTest, Test795) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-(0-((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test796) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) - (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)) ^ ((0-sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test797) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test798) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(sqrt(sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) - (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)) ^ ((0-sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test799) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) + sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -67108843.62428374);
}
TEST_F(MathLibTest, Test800) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0 * sqrt((0-((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0))) - ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((((0) ^ (3)) * 2) * 2 / ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))) ^ (((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)) - (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test801) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ ((0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test802) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))) - sqrt((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) ^ (((0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test803) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4076.963385350372);
}
TEST_F(MathLibTest, Test804) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) - (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)) ^ ((0-sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) / sqrt(((sqrt(((0) ^ (3)) * 4 + 2 * 4) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) * (0-((0) ^ (3)) * 4 + 2 * 4) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) * (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - (0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test805) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test806) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test807) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (1) * (sqrt(((0) ^ (3)) * 4 + 2 * 4) - (0-((0) ^ (3)) * 4 + 2 * 4)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 21084.313257080932);
}
TEST_F(MathLibTest, Test808) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - ((0-(4 + 2 * 4 * 1)) - (0-sqrt(4)) + sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) - (sqrt((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) ^ (sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) + (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))))) - (0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) - sqrt((0-((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test809) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0 * sqrt((0-((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test810) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test811) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) * ((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) ^ ((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)))) + sqrt(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))) - (1 + (4 + 2 * 4) ^ (((0) ^ (3)))) * ((sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) - ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test812) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(((0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))) * (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))) ^ (((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test813) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((0-((0) ^ (3)) * 4 + 2 * 4) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 + ((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) - (0-(4 + 2 * 4 * 1)))) ^ (((2 * 4) ^ (2 * 4 / 2 * 1) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) / 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-(0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test814) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((2 * 4) ^ (2 * 4 / 2 * 1) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) - (0-sqrt(2 * 4))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) + (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) * 4))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test815) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-(0-((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))) + (0-(0-(0-(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ (((0) ^ (3)))) / sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test816) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) - ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))) - sqrt((((0-2 * 4 / 2 * 1) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) / sqrt(sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) / (0-2 * 4 / 2 * 1)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test817) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test818) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -8.0);
}
TEST_F(MathLibTest, Test819) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / 2 / ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) * 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) * (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) * ((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) ^ ((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test820) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) + (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))) + (sqrt(sqrt(((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))) * (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)))) ^ (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) - sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt((((0) ^ (3)) * 2) * 2)) + 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))) * (0-sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test821) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) - sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt((((0) ^ (3)) * 2) * 2)) - sqrt((4 + 2 * 4 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4.464101615137754);
}
TEST_F(MathLibTest, Test823) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * (0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))) ^ (2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 * (0-sqrt(2 * 4))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test824) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) + (((0) ^ (3)) * 2)) ^ ((((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) * sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) + (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) * 4)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test825) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) + sqrt((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) * (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test826) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -2.3094010767585034);
}
TEST_F(MathLibTest, Test827) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) ^ ((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)))) * (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2))) ^ (((0-(4 + 2 * 4 * 1)) - (0-sqrt(4)) - (sqrt(((0) ^ (3)) * 4 + 2 * 4) - (0-((0) ^ (3)) * 4 + 2 * 4))))) ^ ((0-(0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test828) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 * 4 * sqrt((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) / (0-(4 + 2 * 4 * 1)) - (0-sqrt(4))) / sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * 2 * 4)", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test829) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - ((0-(4 + 2 * 4 * 1)) - (0-sqrt(4)) + sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) - (sqrt((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) ^ (sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) + (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))))) - (((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - ((0-(4 + 2 * 4 * 1)) - (0-sqrt(4)) + sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) - (sqrt((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) ^ (sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) + (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))))) - (0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) - sqrt((0-((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test830) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (((0) ^ (3)) * 2) * 2 / ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2)) / ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) / 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test831) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-(2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2))) ^ ((sqrt(((0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))) - (0-(0-(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ (((0) ^ (3)))) / sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test832) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-((0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) ^ (sqrt(4) - (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0)))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test833) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((3) ^ (2)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 3.0);
}
TEST_F(MathLibTest, Test835) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.02405626121623441);
}
TEST_F(MathLibTest, Test836) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(4) * (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) * (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 3.4816129576055994);
}
TEST_F(MathLibTest, Test837) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-sqrt(2 * 4))) + (0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test838) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2 + ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) ^ (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test839) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 8.000000715255737);
}
TEST_F(MathLibTest, Test840) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) * ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))) ^ ((2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - (0-sqrt(2 * 4))))) - ((2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - (0-((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))) + sqrt(((3) ^ (2))) + sqrt(((0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))) / sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) - (0-((0) ^ (3)) * 4 + 2 * 4)) ^ ((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3) + (0-(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))) / ((((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / 4) + (((0) ^ (3)) * 2)) / sqrt((4 + 2 * 4 * 1))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test841) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) - (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777545.553755052);
}
TEST_F(MathLibTest, Test842) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0) ^ (3)) * 2) * 2 - (0-((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -50331646.82842712);
}
TEST_F(MathLibTest, Test843) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - (2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 * (0-sqrt(2 * 4))) ^ (((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -1.000000476837272);
}
TEST_F(MathLibTest, Test844) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) ^ (sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) + (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test845) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) + 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -50331592.0);
}
TEST_F(MathLibTest, Test846) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))) - ((0) ^ (3)) * 4 + 2 * 4 - 3 + sqrt(((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))) ^ ((0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) * ((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) ^ ((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)))) + sqrt(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))) - (1 + (4 + 2 * 4) ^ (((0) ^ (3)))) * ((sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) - ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test847) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt(sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test848) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) ^ ((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) ^ ((2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)))) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0) ^ (sqrt((0-((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4)))))) / (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1 * sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test849) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + (0-((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4))) * sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) - sqrt((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) / (0-(4 + 2 * 4 * 1)) - (0-sqrt(4))))) + sqrt((0-(0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test850) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) / sqrt(((0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test851) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) * (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + (sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) / sqrt(((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test853) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -16777212.0);
}
TEST_F(MathLibTest, Test854) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test855) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) * sqrt(((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -16777212.0);
}
TEST_F(MathLibTest, Test856) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test857) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt(sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test858) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4 + 2 * 4 * 1) * (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) / 2 * 4) ^ (sqrt((4 + 2 * 4 * 1)) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test859) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(((0-(0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))) ^ (((1 / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)))) / sqrt((0-((0) ^ (3)) * 4 + 2 * 4)) / (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) * ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test860) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)))) ^ ((0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (0-(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test861) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-sqrt(2 * 4))) * (4 + 2 * 4) ^ (((0) ^ (3)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test862) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) + sqrt(4) - (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))) ^ (sqrt((4 + 2 * 4 / (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))))) ^ (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test863) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt((0-((0) ^ (3)) * 4 + 2 * 4))) * (1 + (4 + 2 * 4) ^ (((0) ^ (3))))) * ((((2 * 4) ^ (2 * 4 / 2 * 1) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) - (0-sqrt(2 * 4))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) + (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) * 4))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test864) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test865) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) + ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) - ((0-((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4))) / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test866) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((0-(((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) - sqrt((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test867) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) - (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) * (sqrt((sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)) - (((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) / (0-(4 + 2 * 4 * 1)) - (0-sqrt(4))) / sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * 2 * 4", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test868) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) / (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (((2 * 4) ^ (2 * 4 / 2 * 1) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) - sqrt(2 * 4 / 2 * 1))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test869) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1) - (0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test870) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)) ^ (2 * 4 / 2))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 3.0374150886019314e+50);
}
TEST_F(MathLibTest, Test871) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt(2 * 4)) / (((((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) + (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1)) * ((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4))) ^ ((0-(0-((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))))) - sqrt((0-((0) ^ (3)) * 4 + 2 * 4)) / (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) * ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test872) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))) - (0-((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test873) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((sqrt((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)))) ^ ((0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1))) * (0-(0-((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test874) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt(sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))))) * (0-(0-(0-(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ (((0) ^ (3)))) / sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test875) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(4) - 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 14.0);
}
TEST_F(MathLibTest, Test876) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + 2 + (((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) ^ ((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)))) * (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)) * sqrt(((sqrt(((0) ^ (3)) * 4 + 2 * 4) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) * (0-((0) ^ (3)) * 4 + 2 * 4) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test877) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4 * (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - (0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) + (0-(4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.2886758498505502);
}
TEST_F(MathLibTest, Test880) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) / (((((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) + (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1)) * ((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4))) ^ ((0-(0-((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test881) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(2 * 4)) ^ (((((0-((0) ^ (3)) * 4 + 2 * 4) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0))) - (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) + (((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) - sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 / (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)))) + sqrt(2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 - ((0) ^ (3)) * 4 + 2 * 4))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test882) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) * 4", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test884) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + (sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))) - ((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2))))) - (((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) - sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 / (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test885) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) * ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) * ((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) - sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt((((0) ^ (3)) * 2) * 2)) + 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test886) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) + (0-((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test887) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) ^ ((sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test888) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) ^ (sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) + (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))))) - (((2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - (0-((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))) - (0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test889) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4)) * ((((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))) - sqrt((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) ^ (((0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test890) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) + (0-(0-sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4.258859285525654);
}
TEST_F(MathLibTest, Test891) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -2.3094010966267184);
}
TEST_F(MathLibTest, Test892) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) / sqrt((sqrt((sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test893) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt(4) - (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))) ^ (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) * ((sqrt((4 + 2 * 4 * 1))) ^ ((sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test894) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt(((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) + (0-(0-sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))) ^ ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.016599300465033592);
}
TEST_F(MathLibTest, Test895) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)) * (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2)))) + sqrt((2 * 4) ^ (2 * 4 / 2 * 1))) * sqrt((0-((0) ^ (3)) * 4 + 2 * 4) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 + ((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) - (0-(4 + 2 * 4 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1073741823.9922218);
}
TEST_F(MathLibTest, Test896) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2) ^ (((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)) * (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2))))) - sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) * ((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -550.0000101989051);
}
TEST_F(MathLibTest, Test897) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4.0);
}
TEST_F(MathLibTest, Test898) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / 2 / ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) * 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) * (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) * ((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) ^ ((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4))))) / (((0-sqrt(2 * 4)) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) + sqrt((4 + 2 * 4 * 1)) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test899) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * (0-sqrt(4))) * (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3) + (0-(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))) * sqrt(((0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))) * (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))) - ((sqrt((0-2 * 4 / 2 * 1)) * ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / (sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) / (4 + 2 * 4 * 1))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) - sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test900) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt(((3) ^ (2))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.7320508075688772);
}
TEST_F(MathLibTest, Test901) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 + (0-(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ (((0) ^ (3)))) / sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test902) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) * ((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -16777763.0000102);
}
TEST_F(MathLibTest, Test903) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt(((0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))) * (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test904) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((4 + 2 * 4 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 3.4641016151377544);
}
TEST_F(MathLibTest, Test905) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))) / ((0-sqrt(2 * 4)) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test906) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-(0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test907) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) * (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -7.152557373046875e-07);
}
TEST_F(MathLibTest, Test908) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 - ((0) ^ (3)) * 4 + 2 * 4) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) + (((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) ^ ((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) ^ ((2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)))) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0) ^ (sqrt((0-((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4)))))) * sqrt((0-(((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) + (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test909) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 * ((((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)) ^ (2 * 4 / 2)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -1.0);
}
TEST_F(MathLibTest, Test910) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 / (sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) / (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (((2 * 4) ^ (2 * 4 / 2 * 1) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) - sqrt(2 * 4 / 2 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test911) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 - ((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))) - (0-((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test912) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * (0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))) ^ (2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 * (0-sqrt(2 * 4)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test913) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt(sqrt(((3) ^ (2)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.3160740129524924);
}
TEST_F(MathLibTest, Test914) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4 + 2 * 4 * 1) * (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - ((((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) - sqrt((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) - (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))) / sqrt((0-sqrt(2 * 4))) + (0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test915) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) * sqrt(((0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test916) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * (0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) / (0-(((0-(0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))) ^ (((1 / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)))) / sqrt((0-((0) ^ (3)) * 4 + 2 * 4)) / (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) * ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test917) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) * (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) - ((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -511.52248037760467);
}
TEST_F(MathLibTest, Test918) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 * (0-sqrt(2 * 4)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test919) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ (((0) ^ (3)))) / sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) * (((0-2 * 4 / 2 * 1) + ((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test920) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test921) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((0) ^ (3)) * 2) * 2) - ((sqrt((0-2 * 4 / 2 * 1)) * ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / (sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) / (4 + 2 * 4 * 1))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) - sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test922) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((0-(((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) - sqrt((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test923) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test924) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / 4))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test925) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) / (sqrt((0-2 * 4 / 2 * 1) - 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) / (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test926) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 8.001503375067477);
}
TEST_F(MathLibTest, Test927) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((0-2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test928) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((sqrt((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)))) ^ ((0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)))) ^ ((0-sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) + sqrt((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) * (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test929) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) + (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))) + (sqrt(sqrt(((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))) * (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) + (sqrt((0-2 * 4 / 2 * 1) - 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) / (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test930) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt(4 + 2 * 4) - (0-(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ (((0) ^ (3)))) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / (((0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test931) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3) + (0-(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))) / ((((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / 4) + (((0) ^ (3)) * 2)) / sqrt((4 + 2 * 4 * 1))) + sqrt((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test932) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - (0-sqrt(2 * 4))) / sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) + (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test933) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - ((0-(4 + 2 * 4 * 1)) - (0-sqrt(4)) + sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) - (sqrt((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) ^ (sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) + (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))))))) * sqrt(sqrt(((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test934) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 * (2 * 4 / 2) ^ (((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)) * (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -0.4641016151377544);
}
TEST_F(MathLibTest, Test935) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((sqrt(((0) ^ (3)) * 4 + 2 * 4) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)))) / (sqrt(((3) ^ (2))) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) - sqrt(((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test936) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) + (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) + (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))) + 2 / ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) * 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test937) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (sqrt(2) / (0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -0.0027621358640099515);
}
TEST_F(MathLibTest, Test938) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt(sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) - (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)) ^ ((0-sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) / sqrt(((sqrt(((0) ^ (3)) * 4 + 2 * 4) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) * (0-((0) ^ (3)) * 4 + 2 * 4) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) * (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - (0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test939) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) * (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) - ((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ (((3) ^ (2)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1) + (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - ((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) - sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt((((0) ^ (3)) * 2) * 2)) + 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test940) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0-((0) ^ (3)) * 4 + 2 * 4) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0))) - (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) + (((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) - sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 / (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)))) + sqrt(2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 - ((0) ^ (3)) * 4 + 2 * 4) + (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1)", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test941) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) / (1 / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * (0-(0-sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 134217704.00000001);
}
TEST_F(MathLibTest, Test942) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4))) ^ (((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) - (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test943) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) / (0-(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ (((0) ^ (3)))) / sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test944) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(((0-sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)))) ^ ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1 * sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test945) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - (0-sqrt(2 * 4))) - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4155.171572875253);
}
TEST_F(MathLibTest, Test946) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) / 2 * 4 / 2 * 1", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 4095.999633789046);
}
TEST_F(MathLibTest, Test947) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) - (0-((0) ^ (3)) * 4 + 2 * 4) / ((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))) * ((sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * (0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))) ^ (2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 * (0-sqrt(2 * 4))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test948) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) / 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) * (4 + 2 * 4 * 1) * (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) / (1 / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 127323974.27581012);
}
TEST_F(MathLibTest, Test949) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) ^ ((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) ^ ((2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)))) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0) ^ (sqrt((0-((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4)))))) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test950) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) / (0-(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ (((0) ^ (3)))) / sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test951) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(2) + (sqrt((4 + 2 * 4 * 1)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) + ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) * sqrt(((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 16777224.878315173);
}
TEST_F(MathLibTest, Test952) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test953) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt((sqrt(((0) ^ (3)) * 4 + 2 * 4) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)))) / (sqrt(((3) ^ (2))) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1))) ^ ((0-(0-((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.9900622845268686);
}
TEST_F(MathLibTest, Test954) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((0-2 * 4 / 2 * 1) - 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) / (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)) - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) + 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test955) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-2 * 4 / 2 + ((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 281474976710652.0);
}
TEST_F(MathLibTest, Test956) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)) ^ (((0) ^ (3))) + (((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) + (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1)) * ((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test957) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) / (((0) ^ (3)) * 2) * 2 / ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2)) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test958) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3 / (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3) - (2 * 4) ^ (2 * 4 / 2 * 1))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -4099.391932831489);
}
TEST_F(MathLibTest, Test959) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-((0) ^ (3)) * 4 + 2 * 4) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 + ((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) - (0-(4 + 2 * 4 * 1))) / sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test960) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) - (0-((0) ^ (3)) * 4 + 2 * 4) * ((((0) ^ (3)) * 2) * 2 * sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test961) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-sqrt((sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 14188.958524148275);
}
TEST_F(MathLibTest, Test962) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(2 * 4 / 2 * 1 - ((sqrt(((3) ^ (2)))) ^ (1)) ^ (((0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * (0-sqrt(4))) * (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3) + (0-(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test963) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((1 / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))) * sqrt((((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / 4 + 2 * 4) / ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) / (0-(4 + 2 * 4 * 1)) - (0-sqrt(4))))) * ((4 + 2 * 4 * 1) * (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - ((((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) - sqrt((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) - (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test964) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("2 + (((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) ^ ((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)))) * (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)) * sqrt(((sqrt(((0) ^ (3)) * 4 + 2 * 4) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) * (0-((0) ^ (3)) * 4 + 2 * 4) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) + (2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - (0-sqrt(2 * 4))) - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test965) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))) / (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test966) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) + (((0) ^ (3)) * 2) / (0-(0-(0-((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test967) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (1) - sqrt((sqrt((sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2))))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test968) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((sqrt(((0) ^ (3)) * 4 + 2 * 4) - (0-((0) ^ (3)) * 4 + 2 * 4)) / (((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / (sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) / (4 + 2 * 4 * 1)))) ^ (sqrt(sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) + ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - 2 * 4 / 2 * 1) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / (0-(0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test969) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) + sqrt(4) - (0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))) ^ (sqrt((4 + 2 * 4 / (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))))) ^ (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)) / (((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) ^ ((((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) ^ ((2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)))) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0) ^ (sqrt((0-((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4)))))) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test970) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(sqrt((0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)) * (sqrt((4 + 2 * 4 / (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))))) ^ (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) - (((2 * 4) ^ (2 * 4 / 2 * 1) * 2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) - sqrt(((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test971) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) ^ (sqrt((((0) ^ (3)) * 2) * 2))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test972) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))) ^ ((((0-2 * 4 / 2 * 1) + ((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) - 3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.0);
}
TEST_F(MathLibTest, Test973) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) / sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) + sqrt((4 + 2 * 4 * 1)) * (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -0.0015740770485697575);
}
TEST_F(MathLibTest, Test974) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.0);
}
TEST_F(MathLibTest, Test975) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))) - sqrt((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) ^ (sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) + sqrt(4 + 2 * 4) * (0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test976) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) / (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test978) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-((0) ^ (3)) * 4 + 2 * 4) + 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))))) / ((((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - (((0-((2 * 4) ^ (2 * 4 / 2 * 1) + 0 + 0))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test979) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) * ((3) ^ (2))) / ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) - sqrt((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test980) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((0-(0-sqrt(sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 1.5196713713031853);
}
TEST_F(MathLibTest, Test981) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1)))) / (((0-(4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + (((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))) ^ ((((0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))))) ^ ((0-sqrt(2 * 4))) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test982) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-((0) ^ (3)) * 4 + 2 * 4) / sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)) ^ ((0-((3 - ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - sqrt(2 * 4))) ^ (4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4)))) * (2 * 4 / 2 + 4 + 2 * 4 / 2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2)) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4) - sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test983) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((4 * (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) - (0-(4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))) ^ ((sqrt((4 + 2 * 4 / (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0))))) ^ (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test984) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(((3) ^ (2))) + (sqrt(((((0) ^ (3)) * 2) * 2) ^ ((4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1))) * sqrt((4 + 2 * 4 * 1)) / (0 / ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test985) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) ^ ((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) ^ (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) * sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) - (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2) * ((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)) ^ (sqrt((4 + 2 * 4 * 1))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test986) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) + (((0) ^ (3)) * 2) / (0-(0-(0-((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)))) + (0-((0-(sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) - sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test987) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * (0-sqrt(4))) * (sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3) + (0-(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))) + ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test988) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ (sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) / (0-(0-((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))) * (0-sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test989) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3))) ^ (((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) / sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test990) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) + ((0-(4 + 2 * 4 * 1)) - (0-sqrt(4)) - (sqrt(((0) ^ (3)) * 4 + 2 * 4) - (0-((0) ^ (3)) * 4 + 2 * 4)))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test991) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(0-(0-sqrt(((0) ^ (3)) * 4 + 2 * 4)) + (0-sqrt(2 * 4)) * ((0-sqrt(((0) ^ (3)) * 4 + 2 * 4))) ^ (sqrt(4)) * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, -2.8284271247461903);
}
TEST_F(MathLibTest, Test992) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-3 * (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - (0-((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 50331649.0);
}
TEST_F(MathLibTest, Test993) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(4)", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 2.0);
}
TEST_F(MathLibTest, Test994) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("sqrt(sqrt((sqrt((sqrt((4 + 2 * 4 * 1)) * ((0) ^ (3)) * 4 + 2 * 4 + 2 * 4 / 2) * (0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - (((0) ^ (3)) * 2) * 2))))", &Result), SolveResult::DoubleOverflow);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test995) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((((0-2 * 4 / 2 * 1) * sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0)) / sqrt(sqrt((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3))) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1) / (0-2 * 4 / 2 * 1)) + (((((((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) * ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))) ^ ((2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 - (0-sqrt(2 * 4))))) - ((2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))))) ^ (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - (0-((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))) + sqrt(((3) ^ (2))) + sqrt(((0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0) / 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - sqrt(((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 + ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))))) / sqrt(sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0)) - (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2 - (0-((0) ^ (3)) * 4 + 2 * 4) * (0-(((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) + (((((0) ^ (3)) * 2)) ^ ((4 + 2 * 4 * 1))) + ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) - ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0) - (0-((0) ^ (3)) * 4 + 2 * 4)) ^ ((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3) + (0-(sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3))) / ((((4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) / 4) + (((0) ^ (3)) * 2)) / sqrt((4 + 2 * 4 * 1)))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test996) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) ^ (3)) ^ ((sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1)) + 4 + 2 * 4 / 2 * 4 / 2 * 1 - ((0) ^ (3)) * 4 + 2 * 4 - 2 - (2 * 4) ^ (2 * 4 / 2 * 1) + 0 * ((2 * 4 / 2 * 1 / (4 + 2 * 4 * 1) / (0-((((0) ^ (3)) * 2) + ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))))) ^ ((2 * 4) ^ (2 * 4 / 2 * 1) + 0)) * (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) / 0)))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test997) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-(((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1))) - (0-2 * 4 / 2 * 1) - (4) ^ ((2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) - sqrt((0-2 * 4 / 2 * 1))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test998) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("((0-sqrt(((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3))) - ((0-(0-sqrt(2 * 4)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0) + ((2 * 4) ^ (2 * 4 / 2 * 1) + 0 - 0 / 0))) ^ (((1 / (((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)) * sqrt((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) - 3)))) / sqrt((0-((0) ^ (3)) * 4 + 2 * 4)) / (sqrt(sqrt((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) * 2 * 4 / 2 * 1))) ^ (sqrt((0-sqrt(4 + 2 * 4 / 2 * 4 / 2 * 1)) + 3)) * ((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))))", &Result), SolveResult::DivisionByZero);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test999) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-sqrt((0 * sqrt((0-((4 + 2 * 4 * 1)) ^ (((0) ^ (3)) * 4 + 2 * 4 - 3)) - sqrt((2 * 4) ^ (2 * 4 / 2 * 1) + 0)))))", &Result), SolveResult::NotANumber);
    EXPECT_TRUE(std::isnan(Result));
}
TEST_F(MathLibTest, Test1000) {
    double Result;
    EXPECT_EQ(ParseExpressionToFloat("(0-((((((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1))) * 0 + sqrt((4 + 2 * 4 * 1)))) ^ ((0-(2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2) / (2 * 4 / 2 * 1 - ((2 * 4 / 2 * 1) ^ ((4 + 2 * 4 * 1)))) - (((0) ^ (3)) * 2) * 2)) / (0-(4 + 2 * 4 * 1))))", &Result), SolveResult::Success);
    EXPECT_DOUBLE_EQ(Result, 0.02405626121623441);
}
